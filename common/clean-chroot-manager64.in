#!/bin/bash
# clean-chroot-manager by graysky
#
# See the man page for more.

VERS='@VERSION@'
PKG='clean-chroot-manager'
SKEL="/usr/share/$PKG/ccm.skel"

### Begin insert of Arch script
# Avoid any encoding problems
export LANG=C

# check if messages are to be printed using color
unset ALL_OFF BOLD BLUE GREEN RED YELLOW
if [[ -t 2 ]]; then
  # prefer terminal safe colored and bold text when tput is supported
  if tput setaf 0 &>/dev/null; then
    ALL_OFF="$(tput sgr0)"
    BOLD="$(tput bold)"
    BLUE="${BOLD}$(tput setaf 4)"
    GREEN="${BOLD}$(tput setaf 2)"
    RED="${BOLD}$(tput setaf 1)"
    YELLOW="${BOLD}$(tput setaf 3)"

  else
    ALL_OFF="\e[1;0m"
    BOLD="\e[1;1m"
    BLUE="${BOLD}\e[1;34m"
    GREEN="${BOLD}\e[1;32m"
    RED="${BOLD}\e[1;31m"
    YELLOW="${BOLD}\e[1;33m"
  fi
fi
readonly ALL_OFF BOLD BLUE GREEN RED YELLOW

### End insert of Arch script

if [[ -z "$SUDO_USER" ]]; then
  if logname &>/dev/null; then
    USER=$(logname)
  fi
elif [[ "$SUDO_USER" = "root" ]]; then
  mesg="Cannot determine your username so exiting."
  echo -e "${RED}==> ERROR:${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}" && exit 1
else
  USER="$SUDO_USER"
fi

HOMEDIR="$(getent passwd "$USER" | cut -d: -f6)"

# allow user to override from cli thus using multiple files as needed
CFGFILE=${CFGFILE:-$HOMEDIR/.config/$PKG.conf}

# dependency checks probably not needed but they do not hurt
command -v mkarchroot >/dev/null 2>&1 || {
mesg="devtools is required to use this script. Aborting."
echo -e "${RED}==> ERROR:${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}"
exit 1; }

check() {
  if [[ $EUID -ne 0 ]]; then
    local mesg="This script must be called as root!"
    echo -e "${RED}==> ERROR:${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}" && exit 1
  fi

  if [[ ! -f $SKEL ]]; then
    local mesg="$SKEL is missing. Reinstall this package to continue."
    echo -e "${RED}==> ERROR:${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}" && exit 1
  fi

  if [[ ! -f "$CFGFILE" ]]; then
    echo -e "${BOLD}------------------------------------------------------------${ALL_OFF}"
    echo -e "${BOLD} No config file found so creating a fresh one in:${ALL_OFF}"
    echo -e "${BOLD}${BLUE} $HOMEDIR/.config/$PKG.conf${ALL_OFF}"
    echo
    echo -e "${BOLD} Edit this file before invoking $PKG again.${ALL_OFF}"
    echo -e "${BOLD}------------------------------------------------------------${ALL_OFF}"
    su -c "install -Dm644 $SKEL $CFGFILE" "$USER"
    exit 0
  else
    . "$CFGFILE"

    # parse config file for correctness
    if [[ ! -d "$CHROOTPATH64" ]]; then
      local mesg="Invalid CHROOTPATH64 defined in $CFGFILE"
      echo -e "${RED}==> ERROR:${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}" && exit 1
    fi
    
    if [[ ! -d "$OLD_PKGDIR" ]]; then
      local mesg="Invalid OLD_PKGDIR defined in $CFGFILE"
      echo -e "${RED}==> ERROR:${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}" && exit 1
    fi
    
    if [[ -n "$TMP_BUILDDIR" ]] && [[ ! -d "$TMP_BUILDDIR" ]]; then
      local mesg="TMP_BUILDDIR ($TMP_BUILDDIR) defined in $CFGFILE does not exist"
      echo -e "${RED}==> ERROR:${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}" && exit 1
    fi

    REPO="$CHROOTPATH64/root/repo"
  fi

  if [[ ! -f "$DEFAULT_MAKEPKG" ]]; then
    local mesg="Invalid DEFAULT_MAKEPKG file defined in $CFGFILE"
    echo -e "${RED}==> ERROR:${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}" && exit 1
  fi

  # identify status of testing repo
  PACFILE="$CHROOTPATH64/root/etc/pacman.conf"
  if [[ -f "$PACFILE" ]]; then
    if grep -q '^#\[testing\]' "$PACFILE"; then
      # testing repo is not enabled
      export TESTING="Disabled"
    elif grep -q '^\[testing\]' "$PACFILE"; then
      # testing repo is enabled
      export TESTING="Enabled"
    fi
  fi
}

create() {
  if [[ -f "$CHROOTPATH64"/root/.arch-chroot ]]; then
    local mesg="Working directory $CHROOTPATH64 already exists."
    echo -e "${RED}==> ERROR:${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}" && exit 1
  fi

  if ! mkarchroot "$CHROOTPATH64"/root base-devel; then
    exit 1
  fi

  # setup /etc/makepkg.conf in the chroot
  cp "$DEFAULT_MAKEPKG" "$CHROOTPATH64"/root/etc/makepkg.conf

  ###
  ### REMOVE ONCE zstd support is finalized
  ### http://archlinux.2023198.n4.nabble.com/RFC-devtools-Changing-default-compression-method-to-zstd-td4722484i20.html
  ###

  sed -i -e 's/COMPRESSZ=(compress -c -f)/COMPRESSZ=(compress -c -f)\nCOMPRESSZST=(zstd -c -T0 -q -18 -)/' \
    "$CHROOTPATH64"/root/etc/makepkg.conf
  sed -i -e '/lzop/a \\t\t*tar.zst) ${COMPRESSZST[@]:-zstd -c -T0 -q -18 -} ;;' \
    "$CHROOTPATH64"/root/usr/share/makepkg/util/compress.sh
}

check2() {
  if [[ ! -f "$CHROOTPATH64"/root/.arch-chroot ]]; then
    local mesg="No chroot found. Create a chroot first using the 'c' option and try again."
    echo -e "${RED}==>${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}"
    exit 1
  fi
}

addit() {
  #[[ -d "$CHROOTPATH64/$USER/repo" ]] || mkdir "$CHROOTPATH64/$USER/repo"
  if ! rsync -rlxDu --exclude "*.log" ./*.pkg.tar* "$CHROOTPATH64"/root/repo/ &>/dev/null; then
    local mesg="could not add packages to local repo"
    echo -e "${RED}==> ERROR:${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}"
    exit 1
  fi
}

build() {
  local mesg="Attempting to build package..."
  echo -e "${YELLOW}---->${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}"
  
  if [[ ! -f PKGBUILD ]];then
    local mesg="This must be run in a directory containing a PKGBUILD."
    echo -e "${RED}==> ERROR:${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}" && exit 1
  fi

  makechrootpkg_opt="$1"
  makepkg_opt="$2"
  [[ -z "$RUNNAMCAP" ]] && namcap_opt="" || namcap_opt="-n"

  if [[ -n "$TMP_BUILDDIR" ]];then
    local mesg="Building in $TMP_BUILDDIR..."
    echo -e "${YELLOW}---->${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}"
    makechrootpkg_opt="$makechrootpkg_opt -d $TMP_BUILDDIR:/build"
  fi

  nice -19 makechrootpkg $namcap_opt -u $makechrootpkg_opt -r "$CHROOTPATH64" -- $makepkg_opt || true

  . PKGBUILD
  # makepkg can fail to build without throwing an error code so stop if
  # no .pkg.tar* is present in the dir
  if [[ ! -n $(find . -maxdepth 1 -type f -name "*$pkgver-$pkgrel*.pkg.tar*") ]];then
    local mesg="Build failed. See '$TMP_BUILDDIR'."
    echo -e "${RED}==> ERROR:${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}" && exit 1
  fi
  
  if [[ -n "$TMP_BUILDDIR" ]];then
    local mesg="Cleaning $TMP_BUILDDIR..."
    echo -e "${YELLOW}---->${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}"
    find "$TMP_BUILDDIR" -mindepth 1 -maxdepth 1 | xargs -L1 -I{} bash -c "echo rm '{}' && rm -rf '{}'"
  fi

  return 0
}

indexit() {
  # if this is the first time package has been successfully built
  # then append the local repo to the chroot's pacman.conf
  if ! grep -q clean-chroot "$CHROOTPATH64"/root/etc/pacman.conf; then
    # add a local repo to chroot
    sed -i '/\[testing\]/i \
      # Added by clean-chroot-manager\n[local-repo]\nSigLevel = Never\nServer = file://$CHROOTPATH64/root/repo\n' \
      "$CHROOTPATH64"/root/etc/pacman.conf
  fi

  # setup a local repo and add adjust files in chroot
  [[ ! -d "$CHROOTPATH64"/root/repo ]] && mkdir "$CHROOTPATH64"/root/repo
  local mesg="Adding all packages in current dir to chroot repo..."
  echo -e "${YELLOW}---->${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}"

  # it could be that the user is building for both i686 and x86_64
  # in which case we don't want to pollute the pure x86_64 repo
  # with i686 packages so only process 'x86_64' and 'any' types
  GLOBIGNORE="*namcap.log"
  . PKGBUILD
  pkgver="$pkgver-$pkgrel"
  for i in *.pkg.tar*; do
    if ! echo $i | grep -q $pkgver;then
        mv -v $i $OLD_PKGDIR
        continue
    fi
    if [[ "$i" = *i686.pkg.tar* ]]; then
      continue
    else
      existing_pkg=$(echo $i | sed -r "s/(.*)-$pkgver.*/\1/")
      find "$REPO" -name "${existing_pkg}*" -not -name "*${pkgver}*" -exec rm -vf {} \;
      
      [[ -f "$REPO/$i" ]] && [[ "$(md5sum "$i" | cut -d' ' -f1)" == "$(md5sum "$REPO/$i" | cut -d' ' -f1)" ]] && echo "File '$REPO/$i' unchanged" && continue
      
      cp -v "$i" "$REPO" && \
      repo-add "$REPO"/local-repo.db.tar.gz "$REPO/$i" || exit 1

      # ensure that the chroot package matches the live pacman cache package
      # which avoids checksum errors if the user builds the same $pkgname-$pkgver
      # more than once
      [[ -f "/var/cache/pacman/pkg/$i" ]] && rm -f "/var/cache/pacman/pkg/$i"
    fi
  done
  unset GLOBIGNORE

  # The rm statement above can return 1 if the file to remove is not found,
  # causing the function to return a non-zero error code even if everything
  # went fine.  If we've made it to this point, the build was run
  # successfully, so return 0 instead
  return 0
}

syncup() {
  # make sure the user and root copy of repo are in sync since invoking
  # without the -c switch will not on its own
  [[ -d "$CHROOTPATH64"/root/repo ]] &&
    rsync -ax "$CHROOTPATH64"/root/repo/ "$CHROOTPATH64/$USER"/repo/

  # also need a safeguard for users invoking `ccm S` one a fresh chroot to insure
  # that the user's pacman.conf also contains the entry for [local-repo]
  if ! grep -q clean-chroot "$CHROOTPATH64/$USER"/etc/pacman.conf; then
    # add a local repo to chroot
    sed -i '/\[testing\]/i \
      # Added by clean-chroot-manager\n[local-repo]\nSigLevel = Never\nServer = file://$CHROOTPATH64/root/repo\n' \
      "$CHROOTPATH64/$USER"/etc/pacman.conf
  fi
}

update() {
  local mesg="Updating the chroot..."
  echo -e "${YELLOW}---->${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}"
  arch-nspawn "$CHROOTPATH64"/root pacman -Syu --noconfirm
}

install() {
  local mesg="Installing packages to the chroot..."
  echo -e "${YELLOW}---->${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}"
  arch-nspawn "$CHROOTPATH64"/root pacman -S --needed --noconfirm $*
}

repocheck() {
  if [[ ! -f "$REPO/local-repo.db.tar.gz" ]]; then
    local mesg="Local repo in chroot is empty. Build something first."
    echo -e "${RED}==> ERROR:${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}"
    exit 1
  fi
}

list() {
  local mesg="Listing out packages in chroot repo..."
  echo -e "${GREEN}==>${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}"
  ls -lhF -I 'chroot*' "$REPO"
}

delete() {
  local mesg="Deleting all packages and index in chroot repo..."
  echo -e "${GREEN}==>${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}"

  # remove all files from the repo including packages and databases
  rm -rf "${REPO:?}"/*

  # modify pacman.conf so we don't error out due to missing databases
  sed -i '/Added by clean/,+4d' "$CHROOTPATH64"/root/etc/pacman.conf
}

testing() {
  if [[ "$TESTING" = "Disabled" ]]; then
    # switch on testing
    local mesg="Enabling [testing] in chroot..."
    echo -e "${YELLOW}---->${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}"
    sed -i -e '/^#\[testing\]/ s,#,,' \
      -i -e '/^\[testing\]/{$!N; s,#,,}' "$CHROOTPATH64"/root/etc/pacman.conf
    sed -i -e '/^#\[community-testing\]/ s,#,,' \
      -i -e '/^\[community-testing\]/{$!N; s,#,,}' "$CHROOTPATH64"/root/etc/pacman.conf
    local mesg="Forcing an update to use any affected packages..."
    echo -e "${YELLOW}---->${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}"
    arch-nspawn "$CHROOTPATH64"/root pacman -Syu --noconfirm
  elif [[ "$TESTING" = "Enabled" ]]; then
    # switch off testing
    local mesg="Disabling [testing] in chroot..."
    echo -e "${YELLOW}---->${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}"
    sed -i -e '/^\[testing\]/ s,\[,#\[,' \
      -i -e '/^#\[testing\]/{$!N; s,I,#I,}' "$CHROOTPATH64"/root/etc/pacman.conf
    sed -i -e '/^\[community-testing\]/ s,\[,#\[,' \
      -i -e '/^#\[community-testing\]/{$!N; s,I,#I,}' "$CHROOTPATH64"/root/etc/pacman.conf
    local mesg="Downgrading affected packages if any..."
    echo -e "${YELLOW}---->${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}"
    arch-nspawn "$CHROOTPATH64"/root pacman -Syuu --noconfirm
  fi
}

preview() {
  [[ -f "$CHROOTPATH64"/root/.arch-chroot ]] && \
    PRESENT="${BOLD}($(du -sh "$CHROOTPATH64" 2>/dev/null|awk '{ print $1 }'))${ALL_OFF}" || \
    PRESENT="${BOLD}${RED}(Not present)${ALL_OFF}"
  echo -en "${BOLD} chroot path:"
  echo -e "$(tput cr)$(tput cuf 17)${BLUE}$CHROOTPATH64${ALL_OFF}${BOLD} $PRESENT${ALL_OFF}"
  echo
  [[ -z "$RUNNAMCAP" ]] && BAR="${RED}No${ALL_OFF}${BOLD}" || BAR="${BOLD}${GREEN}Yes${ALL_OFF}"
  echo -en "${BOLD} use namcap:"
  echo -e "$(tput cr)$(tput cuf 17)${BLUE}$BAR${ALL_OFF}"
  echo
  [[ "$TESTING" = "Disabled" ]] && TESTING="${BOLD}${RED}Disabled${ALL_OFF}"
  [[ "$TESTING" = "Enabled" ]] && TESTING="${BOLD}${GREEN}Enabled${ALL_OFF}"
  [[ -z "$TESTING" ]] && TESTING="${BOLD}${RED}N/A${ALL_OFF}"
  echo -en "${BOLD} [testing]:"
  echo -e "$(tput cr)$(tput cuf 17)${BLUE}$TESTING${ALL_OFF}"
}

header() {
  echo -e "${BOLD}$PKG v$VERS${ALL_OFF}"
  echo
}

##
#  Copied from https://git.archlinux.org/devtools.git/tree/lib/archroot.sh
##

##
#  Returns if the $path is a the root of a btrfs subvolume (including
#           the top-level subvolume).
#
#  usage  : is_subvolume( $path )
#  return : true if it is, false if not
##
is_subvolume() {
	[[ -e "$1" && "$(stat -f -c %T "$1")" == btrfs && "$(stat -c %i "$1")" == 256 ]]
}

##
#  Find all btrfs subvolumes under and including $path and delete them.
#
#  usage  : subvolume_delete_recursive( $path )
#  return : 0 if it was successful, 1 if not.
##
subvolume_delete_recursive() {
	local subvol
	is_subvolume "$1" || return 0
	while IFS= read -d $'\0' -r subvol; do
		if ! subvolume_delete_recursive "$subvol"; then
			return 1
		fi
	done < <(find "$1" -mindepth 1 -xdev -depth -inum 256 -print0)
	if ! btrfs subvolume delete "$1" &>/dev/null; then
		error "Unable to delete subvolume %s" "$subvol"
		return 1
	fi
	return 0
}

nuke() {
  local mesg="Nuking the chroot..."
  echo -e "${GREEN}==>${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}"
  if [[ $(stat -f -c %T "$CHROOTPATH64") == btrfs ]]; then
    for i in "$CHROOTPATH64"/*; do
      if [ -d "$i" ]; then
        subvolume_delete_recursive "$i" || return -1
      else
        rm -f "$i"
      fi
    done
  else
    rm -rf "${CHROOTPATH64:?}"/*
  fi
}

check

case "$1" in
  a)
    check2 && addit && indexit
    [[ -d $CHROOTPATH64/$USER"/repo" ]] && syncup
    ;;
  c)
    create
    ;;
  t)
    check2 && testing
    # no need to call update since testing function handles this
    ;;
  d)
    check2 && repocheck && delete
    ;;
  l)
    check2 && repocheck && list
    ;;
  n)
    nuke
    ;;
  p)
    header && preview
    ;;
  R)
    if [[ ! -f "$CHROOTPATH64"/root/.arch-chroot ]]; then
      mesg="No chroot has been created/nothing to repackage. Aborting."
      echo -e "${RED}==> ERROR:${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}"
      exit 1
    fi
    build "" "-R" && indexit && syncup
    ;;
  s)
    if [[ ! -f "$CHROOTPATH64"/root/.arch-chroot ]]; then
      mesg="No chroot has been created so making one now..."
      echo -e "${YELLOW}---->${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}"
      mesg=
      create
    fi
    update && build "-c" && indexit && syncup
    ;;
  S)
    if [[ ! -f "$CHROOTPATH64"/root/.arch-chroot ]]; then
      mesg="No chroot has been created so making one now..."
      echo -e "${YELLOW}---->${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}"
      mesg=
      create
    fi
    build && indexit && syncup
    ;;
  u)
    check2 && update
    ;;
  i)
    shift
    check2 && install $*
    ;;
  *)
    header
    echo -e "${BOLD} Usage: ${RED}$0${ALL_OFF}${BOLD} ${ALL_OFF}${BLUE}[option]${ALL_OFF}"
    echo
    echo -e "${BOLD} --- SETUP AND BREAKDOWN  ---"
    echo -e "${BOLD} Target: ${BLUE}$CHROOTPATH64${ALL_OFF}"
    echo -e "${BOLD}   c) Create the clean chroot${ALL_OFF}"
    echo -e "${BOLD}   n) Nuke the clean chroot${ALL_OFF}"
    echo -e "${BOLD}   t) Toggle [testing] on/off${ALL_OFF}"
    echo
    echo -e "${BOLD} --- BUILDING ---${ALL_OFF}"
    echo -e "${BOLD}   s) Run makepkg (default)${ALL_OFF}"
    echo -e "${BOLD}   S) Run makepkg but do not clean first${ALL_OFF}"
    echo -e "${BOLD}   R) Repackage (passes '-- -R' to default)${ALL_OFF}"
    echo
    echo -e "${BOLD} --- LOCAL REPO ---${ALL_OFF}"
    echo -e "${BOLD} Local repo: ${BLUE}$REPO${ALL_OFF}"
    echo -e "${BOLD}   a) Add packages in current dir to the local repo${ALL_OFF}"
    echo -e "${BOLD}   l) List packages in local repo${ALL_OFF}"
    echo -e "${BOLD}   d) Delete all packages in the local repo${ALL_OFF}"
    echo
    echo -e "${BOLD} --- MISCELLANEOUS ---"
    echo -e "${BOLD}   u) Update clean chroot${ALL_OFF}"
    echo -e "${BOLD}   i) Install packages to the clean chroot${ALL_OFF}"
    echo -e "${BOLD}   p) Preview settings${ALL_OFF}"
    ;;
esac
# vim:set ts=2 sw=2 et:
