#!/bin/bash
#
# clean-chroot-manager by graysky
#

# shellcheck disable=1090

VERS='@VERSION@'
PKG='clean-chroot-manager'
SKEL="/usr/share/$PKG/ccm.skel"

### Begin insert of Arch script
# Avoid any encoding problems
export LANG=C

# check if messages are to be printed using color
unset ALL_OFF BOLD BLUE GREEN RED YELLOW
if [[ -t 2 ]]; then
  # prefer terminal safe colored and bold text when tput is supported
  if tput setaf 0 &>/dev/null; then
    ALL_OFF="$(tput sgr0)"
    BOLD="$(tput bold)"
    BLUE="${BOLD}$(tput setaf 4)"
    GREEN="${BOLD}$(tput setaf 2)"
    RED="${BOLD}$(tput setaf 1)"
    YELLOW="${BOLD}$(tput setaf 3)"
  else
    ALL_OFF="\e[1;0m"
    BOLD="\e[1;1m"
    BLUE="${BOLD}\e[1;34m"
    GREEN="${BOLD}\e[1;32m"
    RED="${BOLD}\e[1;31m"
    YELLOW="${BOLD}\e[1;33m"
  fi
fi
readonly ALL_OFF BOLD BLUE GREEN RED YELLOW

### End insert of Arch script

if [[ -z "$SUDO_USER" ]]; then
  if logname &>/dev/null; then
    USER=$(logname)
  fi
elif [[ "$SUDO_USER" = "root" ]]; then
  mesg="Cannot determine your username so exiting."
  echo -e "${RED}==> ERROR:${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}" && exit 1
else
  USER="$SUDO_USER"
fi

HOMEDIR="$(getent passwd "$USER" | cut -d: -f6)"

# allow user to override from cli thus using multiple files as needed
XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-$HOMEDIR/.config}"
CFGFILE=${CFGFILE:-$HOMEDIR/.config/$PKG.conf}

# dependency checks probably not needed but they do not hurt
if ! command -v mkarchroot >/dev/null 2>&1; then
  mesg="devtools is required to use this script. Aborting."
  echo -e "${RED}==> ERROR:${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}"
  exit 1
fi

check() {
  if [[ $EUID -ne 0 ]]; then
    local mesg="This script must be called as root!"
    echo -e "${RED}==> ERROR:${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}" && exit 1
  fi

  if [[ ! -f $SKEL ]]; then
    local mesg="$SKEL is missing. Reinstall this package to continue."
    echo -e "${RED}==> ERROR:${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}" && exit 1
  fi

  if [[ ! -f "$CFGFILE" ]]; then
    echo -e "${BOLD}------------------------------------------------------------${ALL_OFF}"
    echo -e "${BOLD} No config file found so creating a fresh one in:${ALL_OFF}"
    echo -e "${BOLD}${BLUE} $XDG_CONFIG_HOME/$PKG.conf${ALL_OFF}"
    echo
    echo -e "${BOLD} Edit this file before invoking $PKG again.${ALL_OFF}"
    echo -e "${BOLD}------------------------------------------------------------${ALL_OFF}"
    su -c "install -Dm644 $SKEL $CFGFILE" "$USER"
    CORES=$(( $(nproc --all) + 1 ))
    sed -i "/^THREADS=/ s,9,$CORES," "$XDG_CONFIG_HOME/$PKG.conf"
    exit 0
  else
    . "$CFGFILE"

    # parse config file for correctness
    if [[ ! -d "$CHROOTPATH64" ]]; then
      local mesg="Invalid CHROOTPATH64 defined in $CFGFILE"
      echo -e "${RED}==> ERROR:${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}" && exit 1
    fi

    # if user defined a trailing slash remove it here
    if [[ -n "$REPO" ]]; then
      REPO="${REPO%/}"
      # check that external repo actually exists
      if [[ ! -d "$REPO" ]]; then
        local mesg="The external repo configured in $CFGFILE does not exist. Please create the path first."
        echo -e "${RED}==> ERROR:${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}" && exit 1
      fi
      # check write permissions for external path
      if sudo -u "$USER" -H sh -c "[ ! -w \"$REPO\" ]"; then
        local mesg="User $USER has no write permissions on $REPO"
        echo -e "${RED}==> ERROR:${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}" && exit 1
      fi
    else
      REPO="${CHROOTPATH64%/}/root/repo"
    fi
    
    if [[ -z "$REPO_NAME" ]]; then
      REPO_NAME="chroot_local"
    fi

    if ! [[ "$THREADS" =~ ^[0-9]+$ ]]; then
      local mesg="Invalid setting for THREADS defined in $SKEL"
      echo -e "${RED}==> ERROR:${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}" && exit 1
    fi
  fi

  if [[ -n "$DISTCC_THREADS" ]]; then
    if ! [[ "$DISTCC_THREADS" =~ ^[0-9]+$ ]]; then
      local mesg="Invalid setting for DISTCC_THREADS defined in $SKEL"
      echo -e "${RED}==> ERROR:${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}" && exit 1
    fi
  fi

  # ccache must be present on the host system or else dev-tools scripts
  # will throw an error.
  # probably redundant to add a check here but might be more straight forward
  # for users if we do... will leave it out for now.

  if [[ -z ${CCACHE_DIR+x} ]]; then
    # no ccache is being used
    true
  else
    # make sure we have a dir with correct permissions for ccache to use
    if  [[ ! -d "$CCACHE_DIR" ]]; then
      local mesg="Invalid CCACHE_DIR defined in $CFGFILE"
      echo -e "${RED}==> ERROR:${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}" && exit 1
    fi

    if sudo -u "$USER" -H sh -c "[ ! -w \"$CCACHE_DIR\" ]"; then
      local mesg="User $USER has no write permissions on $CCACHE_DIR"
      echo -e "${RED}==> ERROR:${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}" && exit 1
    fi
  fi

  # identify status of testing repo
  PACFILE="$CHROOTPATH64/root/etc/pacman.conf"
  if [[ -f "$PACFILE" ]]; then
    if grep -q '^#\[testing\]' "$PACFILE"; then
      # testing repo is not enabled
      export TESTING="Disabled"
    elif grep -q '^\[testing\]' "$PACFILE"; then
      # testing repo is enabled
      export TESTING="Enabled"
    fi
  fi
}

create() {
  if [[ -f "$CHROOTPATH64"/root/.arch-chroot ]]; then
    local mesg="Working directory $CHROOTPATH64 already exists."
    echo -e "${RED}==> ERROR:${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}" && exit 1
  fi

  local pkgs=('base-devel')

  if [[ -n "$RUNDISTCC" ]]; then
    pkgs+=('distcc')
  fi

  [[ -d "$CCACHE_DIR" ]] && pkgs+=('ccache')
  [[ -f "$CUSTOM_PACMAN_CONF" ]] && insargs+=(-C "$CUSTOM_PACMAN_CONF")
  [[ -f "$CUSTOM_MAKEPKG_CONF" ]] && insargs+=(-M "$CUSTOM_MAKEPKG_CONF")

  if ! mkarchroot "${insargs[@]}" "$CHROOTPATH64"/root "${pkgs[@]}"; then
    exit 1
  fi

  # if using a custom makepkg.conf we assume the options therein are set by
  # the user so do not modify here
  if ! [[ -f "$CUSTOM_MAKEPKG_CONF" ]]; then
    if [[ -n "$RUNDISTCC" ]]; then
      if [[ $DISTCCFAIL -ne 1 ]]; then
        sed -i -e '/#DISTCC_HOSTS/ s,#,,' \
          -i -e "/^DISTCC_HOSTS/ s|=\"\"|=\"$DISTCC_HOSTS\"|" \
          -i -e '/^BUILDENV/ s,!distcc,distcc,' "$CHROOTPATH64"/root/etc/makepkg.conf
      fi
    fi

    [[ -n "$CFLAGS" ]] &&
      sed -i -e "s/^CFLAGS.*/CFLAGS=\"$CFLAGS\"/" \
      -i -e 's/^CXXFLAGS.*/CXXFLAGS="${CFLAGS}"/' "$CHROOTPATH64"/root/etc/makepkg.conf

    [[ -d "$CCACHE_DIR" ]] &&
      sed -i -e '/^BUILDENV/ s,!ccache,ccache,' "$CHROOTPATH64"/root/etc/makepkg.conf

    [[ -n "$PKGEXT" ]] &&
      sed -i -e "s/^PKGEXT.*/PKGEXT=\"$PKGEXT\"/" "$CHROOTPATH64"/root/etc/makepkg.conf
  fi

  if ! [[ -f "$CUSTOM_PACMAN_CONF" ]]; then
    # enable pacman color output in buildroot because I like it
    sed -i -e '/^#Color/ s,#,,' "$CHROOTPATH64"/root/etc/pacman.conf
  fi
}

check2() {
  if [[ ! -f "$CHROOTPATH64"/root/.arch-chroot ]]; then
    local mesg="No buildroot found. Create one using the 'c' option and try again."
    echo -e "${RED}==>${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}"
    exit 1
  fi
}

addit() {
  #[[ -d "$CHROOTPATH64/$USER/repo" ]] || mkdir "$CHROOTPATH64/$USER/repo"
  if ! rsync -rlxDu --exclude "*.log" ./*.pkg.tar* "$REPO"/ &>/dev/null; then
    local mesg="could not add packages to local repo"
    echo -e "${RED}==> ERROR:${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}"
    exit 1
  fi
}

build() {
  args=('-u')
  [[ $CLEANIT -eq 1 ]] && args+=('-c')
  [[ -n "$RUNNAMCAP" ]] && args+=('-n')
  [[ -d "$CCACHE_DIR" ]] && args+=(-d "$CCACHE_DIR:/build/.ccache")
  [[ -d "$DISTCC_DIR" ]] && args+=(-d "$DISTCC_DIR:/build/.distcc")

  if [[ -f "$CUSTOM_MAKEPKG_CONF" ]]; then
    # makechrootpkg reads MAKEFLAGS and PACKAGER from the defined makepkg.conf
    # so honor those values here by not prefixing the call to makechrootpkg
    if ! nice -19 makechrootpkg "${args[@]}" -r "$CHROOTPATH64" "${postargs[@]}"; then
      exit 1
    fi
  else
    # not using a custom makepkg.conf which means we're using the one on the live system so
    # we honor the values for MAKEFLAGS and PACKAGER in ~/.config/clean-chroot-manager.conf
    if ! PACKAGER="$PACKAGER" MAKEFLAGS=-j$THREADS nice -19 makechrootpkg "${args[@]}" -r "$CHROOTPATH64" "${postargs[@]}"; then
      exit 1
    fi
  fi

  # makepkg can can fail to build without throwing an error code so stop if
  # no .pkg.tar* is present in the dir
  [[ -n $(find . -maxdepth 1 -type f -name '*.pkg.tar*') ]] || exit 1
}

indexit() {
  # if this is the first time a package has been successfully built,
  # append the local repo to the buildroot's pacman.conf
  if ! grep -q "$REPO_NAME" "$CHROOTPATH64"/root/etc/pacman.conf; then
    # add a local repo to buildroot
    sed -i "/\[testing\]/i \
      # Added by clean-chroot-manager\n[$REPO_NAME]\nSigLevel = Never\nServer = file://$REPO\n" \
          "$CHROOTPATH64"/root/etc/pacman.conf
  fi

  # setup a local repo and add adjust files in buildroot
  [[ ! -d "$REPO" ]] && mkdir "$REPO"
  local mesg="Adding all packages in current dir to buildroot repo..."
  echo -e "${YELLOW}---->${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}"

  # it could be that the user is building for both i686 and x86_64
  # in which case we don't want to pollute the pure x86_64 repo
  # with i686 packages so only process 'x86_64' and 'any' types
  GLOBIGNORE="*namcap.log"
  for i in *.pkg.tar*; do
    cp "$i" "$REPO"
    repo-add "$REPO"/"$REPO_NAME".db.tar.gz "$REPO/$i" || exit 1

    # make sure that the buildroot package matches the live pacman cache package
    # to avoid a checksum error if the user builds the same package wo/ bumping the pkgver
    [[ -f "/var/cache/pacman/pkg/$i" ]] && rm -f "/var/cache/pacman/pkg/$i"
  done
  unset GLOBIGNORE

  # The rm statement above can return 1 if the file to remove is not found,
  # causing the function to return a non-zero error code even if everything
  # went fine.  If we've made it to this point, the build was run
  # successfully, so return 0 instead
  return 0
}

syncup() {
  # make sure the user copy and root copy of the repo are in parity since invoking
  # without the -c switch will not on its own, but only if the repo resides in the chroot
  [[ "$REPO" == "${CHROOTPATH64%/}/root/repo" ]] &&  [[ -d "$REPO" ]] &&
    rsync -ax "$REPO"/ "${CHROOTPATH64%/}/$USER"/repo/

  # also need a safeguard for users invoking `ccm S` once a fresh buildroot to ensure
  # that the user's pacman.conf also contains the entry for [chroot_local]
  if ! grep -q "$REPO_NAME" "$CHROOTPATH64/$USER"/etc/pacman.conf; then
    # add a local repo to buildroot
    if $REPO="${CHROOTPATH64%/}/root/repo"; then
      sed -i "/\[testing\]/i \
      # Added by clean-chroot-manager\n[chroot_local]\nSigLevel = Never\nServer = file://${CHROOTPATH64%/}/$USER/repo\n" \
          "${CHROOTPATH64%/}/$USER"/etc/pacman.conf
    else
      sed -i "/\[testing\]/i \
      # Added by clean-chroot-manager\n["$REPO_NAME"]\nSigLevel = Never\nServer = file://$REPO\n" \
          "${CHROOTPATH64%/}/$USER"/etc/pacman.conf
    fi
  fi
}

update() {
  local mesg="Updating the buildroot..."
  echo -e "${YELLOW}---->${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}"
  arch-nspawn "$CHROOTPATH64"/root pacman -Syu --noconfirm
}

repocheck() {
  if [[ ! -f "$REPO/$REPO_NAME.db.tar.gz" ]]; then
    local mesg="Local repo in buildroot is empty. Build something first."
    echo -e "${RED}==> ERROR:${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}"
    exit 1
  fi
}

list() {
  local mesg="Listing out packages in buildroot repo..."
  echo -e "${GREEN}==>${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}"
  ls --color -lhF -I 'chroot*' "$REPO"
}

delete() {
  # remove all files from the repo including packages and databases
  rm -rf "${REPO:?}"/*

  # modify pacman.conf so we don't error out due to missing databases
  sed -i '/Added by clean/,+4d' "$CHROOTPATH64"/root/etc/pacman.conf
}

testing() {
  if [[ "$TESTING" = "Disabled" ]]; then
    # switch on testing
    local mesg="Enabling [testing] in buildroot..."
    echo -e "${YELLOW}---->${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}"
    sed -i -e '/^#\[testing\]/ s,#,,' \
      -i -e '/^\[testing\]/{$!N; s,#,,}' "$CHROOTPATH64"/root/etc/pacman.conf

    sed -i -e '/^#\[community-testing\]/ s,#,,' \
      -i -e '/^\[community-testing\]/{$!N; s,#,,}' "$CHROOTPATH64"/root/etc/pacman.conf

    local mesg="Forcing an update to use any affected packages..."
    echo -e "${YELLOW}---->${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}"
    arch-nspawn "$CHROOTPATH64"/root pacman -Syu --noconfirm
  elif [[ "$TESTING" = "Enabled" ]]; then
    # switch off testing
    local mesg="Disabling [testing] in buildroot..."
    echo -e "${YELLOW}---->${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}"

    sed -i -e '/^\[testing\]/ s,\[,#\[,' \
      -i -e '/^#\[testing\]/{$!N; s,I,#I,}' "$CHROOTPATH64"/root/etc/pacman.conf

    sed -i -e '/^\[community-testing\]/ s,\[,#\[,' \
      -i -e '/^#\[community-testing\]/{$!N; s,I,#I,}' "$CHROOTPATH64"/root/etc/pacman.conf

    local mesg="Downgrading affected packages if any..."
    echo -e "${YELLOW}---->${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}"
    arch-nspawn "$CHROOTPATH64"/root pacman -Syuu --noconfirm
  fi
}

preview() {
  if [[ -f "$CHROOTPATH64"/root/.arch-chroot ]]; then
    HERE=1
    PRESENT="${BOLD}($(du -sh "$CHROOTPATH64" 2>/dev/null|awk '{ print $1 }'))${ALL_OFF}"
  else
    PRESENT="${BOLD}${RED}(None present)${ALL_OFF}"
  fi

  echo -en "${BOLD} buildroot path:"
  echo -e "$(tput cr)$(tput cuf 18)${BLUE}$CHROOTPATH64/${ALL_OFF}${BOLD} $PRESENT${ALL_OFF}"

  if [[ -n "$CCACHE_DIR" ]]; then
    CCSIZE=$(du -sh "$CCACHE_DIR" 2>/dev/null|awk '{ print $1 }')
    # if null contents write out a pretty message
    [[ "$CCSIZE" = "0" ]] && CCSIZE="${BOLD}${RED}(Empty cache)${ALL_OFF}" || CCSIZE="${BOLD}($CCSIZE)${ALL_OFF}"
    echo -en "${BOLD} ccache path:"
    echo -e "$(tput cr)$(tput cuf 18)${BLUE}$CCACHE_DIR/${ALL_OFF} $CCSIZE"
  fi

  if [[ -f "$CUSTOM_PACMAN_CONF" ]]; then
    echo -en "${BOLD} custom config:"
    echo -e "$(tput cr)$(tput cuf 18)$CUSTOM_PACMAN_CONF${ALL_OFF}${BOLD}${ALL_OFF}"
  fi

  if [[ -f "$CUSTOM_MAKEPKG_CONF" ]]; then
    echo -en "${BOLD} custom config:"
    echo -e "$(tput cr)$(tput cuf 18)$CUSTOM_MAKEPKG_CONF${ALL_OFF}${BOLD}${ALL_OFF}"
    # use threads value from the custom config
    BR_THREADS=$(grep MAKEFLAGS= "$CUSTOM_MAKEPKG_CONF")
    THREADS="${BR_THREADS//[^0-9]/}"
  fi

  if [[ HERE -eq 1 ]]; then
    echo
    echo -en "${BOLD} buildroot threads:"
    echo -e "$(tput cr)$(tput cuf 21)${BOLD}$THREADS${ALL_OFF}"

    if [[ $(grep -c '^#\[testing]' "$CHROOTPATH64"/root/etc/pacman.conf) -eq 0 ]]; then
      TESTING_C="${BOLD}${GREEN}[testing]${ALL_OFF}"
    else
      TESTING_C="${RED}[testing]${ALL_OFF}${BOLD}"
    fi

    if [[ $(grep '^BUILDENV' "$CHROOTPATH64"/root/etc/makepkg.conf | grep -c '!distcc') -eq 0 ]]; then
      DISTCC_C="${BOLD}${GREEN}distcc${ALL_OFF}"
    else
      DISTCC_C="${RED}distcc${ALL_OFF}${BOLD}"
    fi

    if [[ $(grep '^BUILDENV' "$CHROOTPATH64"/root/etc/makepkg.conf | grep -c '!ccache') -eq 0 ]]; then
      CCACHE_C="${BOLD}${GREEN}ccache${ALL_OFF}"
    else
      CCACHE_C="${RED}ccache${ALL_OFF}${BOLD}"
    fi

    echo -en "${BOLD} buildroot options:"
    echo -e "$(tput cr)$(tput cuf 21)${BOLD}$TESTING_C  $DISTCC_C  $CCACHE_C${ALL_OFF}"
  fi
}

header() {
  echo -e "${BOLD}$PKG v$VERS${ALL_OFF}"
  echo
}

##
#  Copied from https://git.archlinux.org/devtools.git/tree/lib/archroot.sh
##

##
#  Returns if the $path is a the root of a btrfs subvolume (including
#           the top-level subvolume).
#
#  usage  : is_subvolume( $path )
#  return : true if it is, false if not
##
is_subvolume() {
  [[ -e "$1" && "$(stat -f -c %T "$1")" == btrfs && "$(stat -c %i "$1")" == 256 ]]
}

##
#  Find all btrfs subvolumes under and including $path and delete them.
#
#  usage  : subvolume_delete_recursive( $path )
#  return : 0 if it was successful, 1 if not.
##
subvolume_delete_recursive() {
  local subvol
  is_subvolume "$1" || return 0
  while IFS= read -d $'\0' -r subvol; do
    if ! subvolume_delete_recursive "$subvol"; then
      return 1
    fi
  done < <(find "$1" -mindepth 1 -xdev -depth -inum 256 -print0)
  if ! btrfs subvolume delete "$1" &>/dev/null; then
    error "Unable to delete subvolume %s" "$subvol"
    return 1
  fi
  return 0
}

nuke() {
  local mesg="Nuking the buildroot..."
  echo -e "${GREEN}==>${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}"
  if [[ $(stat -f -c %T "$CHROOTPATH64") == btrfs ]]; then
    for i in "$CHROOTPATH64"/*; do
      if [ -d "$i" ]; then
        subvolume_delete_recursive "$i" || return 255
      else
        rm -f "$i"
      fi
    done
  else
    rm -rf "${CHROOTPATH64:?}"/*
  fi
}

purgecache() {
  local mesg="Purging ccache..."
  echo -e "${GREEN}==>${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}"
  if [[ $(stat -f -c %T "$CCACHE_DIR") == btrfs ]]; then
    for i in "$CCACHE_DIR"/*; do
      if [ -d "$i" ]; then
        subvolume_delete_recursive "$i" || return 255
      else
        rm -f "$i"
      fi
    done
  else
    rm -rf "${CCACHE_DIR:?}"/*
  fi
}

distcc_check() {
  # this is a catch-all function to check for a running distcc and to
  # override the THREADS value due to https://bugs.archlinux.org/task/64349
  # which to is not fixed even though it is closed

  # if the buildroot is already created, see if distcc is enabled and
  # simply set RUNDISTCC which may or may not be set in the config file
  # if the user created the buildroot with the 'cd' switch

  if [[ -f "$CHROOTPATH64/root/etc/makepkg.conf" ]]; then
    if grep -q -i '^BUILDENV=(distcc' "$CHROOTPATH64/root/etc/makepkg.conf"; then
      # a buildroot is present with distcc enabled
      RUNDISTCC=y
    fi
  fi

  # RUNDISTCC can also be forced via the 'cd' swtich as well as set in the config
  if [[ -n "$RUNDISTCC" ]]; then
    # fail if distcc_threads aren't defined
    if [[ -z "$DISTCC_THREADS" ]]; then
      mesg="Define DISTCC_THREADS in $CFGFILE to build with distcc. Aborting."
      echo -e "${RED}==> ERROR:${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}"
      exit 1
    fi

    # need to prefix the call to makechrootpkg with threads value
    # https://bugs.archlinux.org/task/64349
    THREADS=$DISTCC_THREADS

  fi
}

etime() {
  if pidof -q -x makechrootpkg; then
    etime=$( ps --no-headers -o %t $(pidof -x sudo ccm | awk '{ print $(NF) }') )
    echo -en "${BOLD} elasped time:"
    echo -e "$(tput cr)$(tput cuf 18)${BLUE}${etime/      /}${ALL_OFF}${BOLD} $PRESENT${ALL_OFF}"
  else
    mesg="Cannot determine pid of running build. Aborting."
    echo -e "${RED}==> ERROR:${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}"
    exit 1
  fi
}
case "$1" in
  a)
    check && check2 && addit && indexit
    [[ -d $CHROOTPATH64/$USER"/repo" ]] && syncup
    ;;
  c)
    check && distcc_check && create
    ;;
  cd)
    # force running with distcc to override the config file setting
    check && distcc_check
    RUNDISTCC=y
    create
    ;;
  pc)
    check && purgecache
    ;;
  t)
    check && check2 && testing
    # no need to call update since testing function handles this
    ;;
  d)
    mesg="Deleting all packages and index in buildroot repo..."
    echo -e "${GREEN}==>${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}"
    mesg=
    check && check2 && repocheck && delete
    ;;
  l)
    check && check2 && repocheck && list
    ;;
  n)
    check && nuke
    ;;
  p)
    check && header && distcc_check && preview
    ;;
  ti)
    check && header && etime
    ;;
  R)
    check
    if [[ ! -f "$CHROOTPATH64"/root/.arch-chroot ]]; then
      mesg="No buildroot has been created/nothing to repackage. Aborting."
      echo -e "${RED}==> ERROR:${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}"
      exit 1
    fi

    postargs=('--' '-R')
    mesg="Attempting to repackage..."
    echo -e "${YELLOW}---->${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}"
    mesg=
    # flag to NOT add a '-c' to the args array
    CLEANIT=0
    build && indexit && syncup
    ;;
  s)
    check && distcc_check
    if [[ ! -f "$CHROOTPATH64"/root/.arch-chroot ]]; then
      mesg="No buildroot has been created so making one now..."
      echo -e "${YELLOW}---->${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}"
      mesg=
      create
    fi

    mesg="Attempting to build package..."
    echo -e "${YELLOW}---->${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}"
    mesg=

    # flag to add '-c' to the args array
    CLEANIT=1
    check && build && indexit && syncup
    ;;
  S)
    check
    if [[ ! -f "$CHROOTPATH64"/root/.arch-chroot ]]; then
      mesg="No buildroot has been created so making one now..."
      echo -e "${YELLOW}---->${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}"
      mesg=
      create
    fi

    mesg="Attempting to build package..."
    echo -e "${YELLOW}---->${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}"
    mesg=

    # flag to NOT add a '-c' to the args array
    CLEANIT=0
    check && build && indexit && syncup
    ;;
  u)
    check && check2 && update
    ;;
  *)
    header
    echo -e "${BOLD} Usage: ${RED}$0${ALL_OFF}${BOLD} ${ALL_OFF}${BLUE}[option]${ALL_OFF}"
    echo
    echo -e "${BOLD} --- SETUP AND BREAKDOWN  ---"
    echo -e "${BOLD} Target: ${BLUE}$CHROOTPATH64${ALL_OFF}"
    echo -e "${BOLD}   c) Create the clean buildroot${ALL_OFF}"
    echo -e "${BOLD}  cd) Create the clean buildroot with distcc${ALL_OFF}"
    echo -e "${BOLD}   n) Nuke the clean buildroot${ALL_OFF}"
    echo -e "${BOLD}   t) Toggle [testing] on/off${ALL_OFF}"
    echo
    if [[ -n "$CCACHE_DIR" ]]; then
      echo -e "${BOLD} Target: ${BLUE}$CCACHE_DIR${ALL_OFF}"
      echo -e "${BOLD}  pc) Purge the ccache${ALL_OFF}"
      echo
    fi
    echo -e "${BOLD} --- BUILDING ---${ALL_OFF}"
    echo -e "${BOLD}   R) Repackage (passes '-- -R' to default)${ALL_OFF}"
    echo -e "${BOLD}   S) Run makepkg but do not clean first${ALL_OFF}"
    echo -e "${BOLD}   s) Run makepkg (default)${ALL_OFF}"
    echo
    echo -e "${BOLD} --- LOCAL REPO ---${ALL_OFF}"
    echo -e "${BOLD} Local repo: ${BLUE}$REPO${ALL_OFF}"
    echo -e "${BOLD}   a) Add packages in current dir to the local repo${ALL_OFF}"
    echo -e "${BOLD}   d) Delete all packages in the local repo${ALL_OFF}"
    echo -e "${BOLD}   l) List packages in local repo${ALL_OFF}"
    echo
    echo -e "${BOLD} --- MISCELLANEOUS ---"
    echo -e "${BOLD}   p) Preview settings${ALL_OFF}"
    echo -e "${BOLD}  ti) Show run time of current build${ALL_OFF}"
    echo -e "${BOLD}   u) Update clean buildroot${ALL_OFF}"
    ;;
esac

# vim:set ts=2 sw=2 et:
