#!/bin/bash
# clean-chroot-manager by graysky
#
# See the man page for more.

VERS='@VERSION@'
PKG='clean-chroot-manager'
SKEL="/usr/share/$PKG/ccm.skel"

# Pretty colors thanks to /usr/bin/mkarchroot
### Begin insert of Arch script
# Avoid any encoding problems
export LANG=C

# check if messages are to be printed using color
unset ALL_OFF BOLD BLUE GREEN RED YELLOW
if [[ -t 2 ]]; then
	# prefer terminal safe colored and bold text when tput is supported
	if tput setaf 0 &>/dev/null; then
		ALL_OFF="$(tput sgr0)"
		BOLD="$(tput bold)"
		BLUE="${BOLD}$(tput setaf 4)"
		GREEN="${BOLD}$(tput setaf 2)"
		RED="${BOLD}$(tput setaf 1)"
		YELLOW="${BOLD}$(tput setaf 3)"

	else
		ALL_OFF="\e[1;0m"
		BOLD="\e[1;1m"
		BLUE="${BOLD}\e[1;34m"
		GREEN="${BOLD}\e[1;32m"
		RED="${BOLD}\e[1;31m"
		YELLOW="${BOLD}\e[1;33m"
	fi
fi
readonly ALL_OFF BOLD BLUE GREEN RED YELLOW

### End insert of Arch script

if [[ -z "$SUDO_USER" ]]; then
	logname &>/dev/null
	if [[ $? -eq 0 ]]; then
		USER=$(logname)
	fi
elif [[ "$SUDO_USER" = "root" ]]; then
	mesg="Cannot determine your username so exiting."
	echo -e "${RED}==> ERROR:${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}" && exit 1
else
	USER="$SUDO_USER"
fi

HOMEDIR="$(getent passwd $USER | cut -d: -f6)"
CFGFILE=$HOMEDIR/.config/$PKG.conf

# dependency checks probably not needed but they do not hurt
command -v mkarchroot >/dev/null 2>&1 || {
mesg="devtools is required to use this script. Aborting."
echo -e "${RED}==> ERROR:${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}"
exit 1; }

check() {
	if [[ $EUID -ne 0 ]]; then
		local mesg="This script must be called as root!"
		echo -e "${RED}==> ERROR:${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}" && exit 1
	fi

	if [[ ! -f $SKEL ]]; then
		local mesg="$SKEL is missing. Reinstall this package to continue."
		echo -e "${RED}==> ERROR:${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}" && exit 1
	fi

	if [[ ! -f "$CFGFILE" ]]; then
		echo -e ${BOLD}'------------------------------------------------------------'${ALL_OFF}
		echo -e ${BOLD}' No config file found so creating a fresh one in:'${ALL_OFF}
		echo -e ${BOLD}${BLUE}" $HOMEDIR/.config/$PKG.conf"${ALL_OFF}
		echo
		echo -e ${BOLD}" Edit this file before invoking $PKG again."${ALL_OFF}
		echo -e ${BOLD}'------------------------------------------------------------'${ALL_OFF}
		su -c "install -Dm644 $SKEL $CFGFILE" "$USER"
		# guess how many threads based on invocation on this particular machine
		CORES=$(grep -c processor /proc/cpuinfo)
		CORES=$(( $CORES + 1 ))
		sed -i "/^THREADS=/ s,9,$CORES," $HOMEDIR/.config/$PKG.conf
		exit 0
	else
		. $CFGFILE

		# parse config file for correctness
		if [[ ! -d $CHROOTPATH32 ]]; then
			local mesg="Invalid CHROOTPATH32 defined in $CFGFILE"
			echo -e "${RED}==> ERROR:${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}" && exit 1
		fi

		REPO="$CHROOTPATH32/root/repo"

		if [[ "$THREADS" =~ ^[0-9]+$ ]]; then
			# correctly setup
			/bin/true
		else
			local mesg="Invalid setting for THREADS defined in $SKEL"
			echo -e "${RED}==> ERROR:${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}" && exit 1
		fi
	fi

	# identify status of testing repo
	PACFILE="$CHROOTPATH32/root/etc/pacman.conf"
	if [[ -f "$PACFILE" ]]; then
		if [[ $(grep '^#\[testing\]' "$PACFILE") ]]; then
			# testing repo is not enabled
			export TESTING="Disabled"
		elif [[ $(grep '^\[testing\]' "$PACFILE") ]]; then
			# testing repo is enabled
			export TESTING="Enabled"
		fi
	fi

	# identify status of multilib repo
	PACFILE="$CHROOTPATH32/root/etc/pacman.conf"
	if [[ -f "$PACFILE" ]]; then
		if [[ $(grep '^#\[multilib\]' "$PACFILE") ]]; then
			# multilib repo is not enabled
			export MULTILIB="Disabled"
		elif [[ $(grep '^\[multilib\]' "$PACFILE") ]]; then
			# multilib repo is enabled
			export MULTILIB="Enabled"
		fi
	fi
}

create() {
	if [[ -f $CHROOTPATH32/root/.arch-chroot ]]; then
		local mesg="Working directory $CHROOTPATH32 already exists."
		echo -e "${RED}==> ERROR:${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}" && exit 1
	fi

	if [[ -n "$RUNDISTCC" ]]; then
		# first check that the chroot matches that of the native environment
		# since I am unclear how to handle a cross-compiling scenario using
		# distcc on the native environment and makepkg within the chroot.

		if [[ $(uname -m) = "i686" ]]; then
			setarch "i686" mkarchroot -C /usr/share/devtools/pacman-extra.conf \
				-M /usr/share/devtools/makepkg-i686.conf $CHROOTPATH32/root base-devel distcc
		else
			local mesg="Distcc build disabled! Cannot use distcc i686 to build a x86_64 package!"
			echo -e "${RED}==> ERROR:${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}"
			DISTCCFAIL=1
			sleep 3s
			setarch "i686" mkarchroot -C /usr/share/devtools/pacman-extra.conf \
				-M /usr/share/devtools/makepkg-i686.conf $CHROOTPATH32/root base-devel
		fi
	else
		# not asking to use distcc so proceed with normal chroot
		setarch "i686" mkarchroot -C /usr/share/devtools/pacman-extra.conf \
			-M /usr/share/devtools/makepkg-i686.conf $CHROOTPATH32/root base-devel
	fi

	# setup /etc/makepkg.conf in the chroot
	if [[ -z "$PACKAGER" ]]; then
		sed -i -e "s/#MAKEFLAGS=\"-j2\"/MAKEFLAGS=\"-j$THREADS\"/" $CHROOTPATH32/root/etc/makepkg.conf
	else
		sed -i -e "s/#MAKEFLAGS=\"-j2\"/MAKEFLAGS=\"-j$THREADS\"/" \
			-i -e '/^#PACKAGER/ s,#,,' \
			-i -e "/^PACKAGER/ s,=.*,=\"$PACKAGER\"," $CHROOTPATH32/root/etc/makepkg.conf
	fi

	if [[ -n "$RUNDISTCC" ]]; then
		if [[ $DISTCCFAIL -ne 1 ]]; then
			sed -i -e '/#DISTCC_HOSTS/ s,#,,' \
				-i -e "/^DISTCC_HOSTS/ s,=\"\",=\"$DISTCC_HOSTS\"," \
				-i -e '/^BUILDENV/ s,!distcc,distcc,' $CHROOTPATH32/root/etc/makepkg.conf

			# also may need /etc/hosts from the native environment if the user defined
			# distcc slaves by hostname rather than by ip addy
			[[ -f /etc/hosts ]] && cp /etc/hosts $CHROOTPATH32/root/etc
		fi
	fi

	if [[ -n "$CFLAGS" ]]; then
		sed -i -e "s/^CFLAGS.*/CFLAGS=\"$CFLAGS\"/" \
			-i -e 's/^CXXFLAGS.*/CXXFLAGS="${CFLAGS}"/' $CHROOTPATH32/root/etc/makepkg.conf
	fi

	# enable pacman color output in chroot because I like it
	sed -i -e '/^#Color/ s,#,,' $CHROOTPATH32/root/etc/pacman.conf

	# do the same for gcc errors
	sed -i -e 's/size=4/size=4 -fdiagnostics-color/g' $CHROOTPATH32/root/etc/makepkg.conf
}

modify_mcp() {
	# since /usr/bin/makechrootpkg provided by devtools will overwrite the
	# $MAKEFLAGS and $PACKAGER upon the user invoking it, we simply create
	# a copy of this script removing the offending lines and defaulting to the
	# $MAKEFLAGS and $PACKAGER the ccm user defined in the config file.
	#
	# this function is broken out of the 'create' function for compatibility
	# with users who keep their clean-chroots around using older versions of ccm.

	sed -e '/if \[\[ -n $MAKEFLAG/,+4d' \
		-e '/if \[\[ -n $PACKAGER/,+4d' /usr/bin/makechrootpkg > $CHROOTPATH32/root/makechrootpkg-mod

	if [[ $? -ne 0 ]]; then
		local mesg="Could not make a copy of /usr/bin/makechrootpkg which should not happen!"
		echo -e "${RED}==> ERROR:${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}"
		exit 1
	fi

	chmod +x $CHROOTPATH32/root/makechrootpkg-mod
}

check2() {
	if [[ ! -f $CHROOTPATH32/root/.arch-chroot ]]; then
		local mesg="No chroot found. Create a chroot first using the 'c' option and try again."
		echo -e "${RED}==>${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}"
		exit 1
	fi
}

build() {
	# with version 3.69, $CHROOTPATH32/root/makechrootpkg-mod is created by ccm
	# in order to preserve user setttings and is now required to run so fail if
	# an old chroot is on a filesystem
	[[ -x $CHROOTPATH32/root/makechrootpkg-mod ]] || modify_mcp
	# try to build the package
	local mesg="Attempting to build package..."
	echo -e "${YELLOW}---->${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}"

	if [[ -z "$RUNNAMCAP" ]]; then
		nice -19 $CHROOTPATH32/root/makechrootpkg-mod -c -u -r $CHROOTPATH32
	else
		nice -19 $CHROOTPATH32/root/makechrootpkg-mod -c -u -n -r $CHROOTPATH32
	fi

	# stop here if build fails
	[[ $? -eq 0 ]] || exit 1
}

buildnc() {
	# try to build the package
	local mesg="Attempting to build package..."
	echo -e "${YELLOW}---->${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}"

	if [[ -z "$RUNNAMCAP" ]]; then
		nice -19 $CHROOTPATH32/root/makechrootpkg-mod -u -r $CHROOTPATH32
	else
		nice -19 $CHROOTPATH32/root/makechrootpkg-mod -u -n -r $CHROOTPATH32
	fi

	# stop here if build fails
	[[ $? -eq 0 ]] || exit 1
}

indexit() {
	# if this is the first time package has been successfully built
	# then append the local repo to the chroot's pacman.conf
	if [[ -z $(grep clean-chroot $CHROOTPATH32/root/etc/pacman.conf) ]]; then
		# add a local repo to chroot
		sed -i '/\[testing\]/i \
			# Added by clean-chroot-manager\n[chroot_local]\nSigLevel = Never\nServer = file:///repo\n' \
			$CHROOTPATH32/root/etc/pacman.conf
	fi

	# setup a local repo and add adjust files in chroot
	[[ ! -d $CHROOTPATH32/root/repo ]] && mkdir $CHROOTPATH32/root/repo
	local mesg="Adding package to chroot repo..."
	echo -e "${YELLOW}---->${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}"

	# it could be that the user is building for both i686 and x86_64
	# in which case we don't want to pollute the pure i686 repo
	# with x86_64 packages so only process 'i686' and 'any' types
	for i in $(ls *.pkg.tar.xz | sed '/-x86_64.pkg.tar.xz/d'); do
		cp "$i" $REPO
		repo-add $REPO/chroot_local.db.tar.gz $REPO/"$i" || exit 1

		# ensure that the chroot package matches the live pacman cache package
		# which avoids checksum errors if the user builds the same $pkgname-$pkgver
		# more than once
		[[ -f "/var/cache/pacman/pkg/$i" ]] && rm -f "/var/cache/pacman/pkg/$i"
	done

	# The rm statement above can return 1 if the file to remove is not found,
	# causing the function to return a non-zero error code even if everything
	# went fine.  If we've made it to this point, the build was run
	# successfully, so return 0 instead
	return 0
}

update() {
	local mesg="Updating the chroot..."
	echo -e "${YELLOW}---->${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}"
	arch-nspawn $CHROOTPATH32/root pacman -Syu --noconfirm
}

repocheck() {
	if [[ ! -f "$REPO/chroot_local.db.tar.gz" ]]; then
		local mesg="Local repo in chroot is empty. Build something first."
		echo -e "${RED}==> ERROR:${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}"
		exit 1
	fi
}

list() {
	local mesg="Listing out packages in chroot repo..."
	echo -e "${GREEN}==>${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}"
	ls -lh $REPO | grep pkg.tar
}

delete() {
	local mesg="Deleting all packages and index in chroot repo..."
	echo -e "${GREEN}==>${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}"

	# remove all files from the repo including pacakges and databases
	rm -rf $REPO/*

	# modify pacman.conf so we don't error out due to missing databases
	sed -i '/Added by clean/,+4d' $CHROOTPATH32/root/etc/pacman.conf
}

testing() {
	if [[ "$TESTING" = "Disabled" ]]; then
		# switch on testing
		local mesg="Enabling [testing] in chroot..."
		echo -e "${YELLOW}---->${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}"
		sed -i -e '/^#\[testing\]/ s,#,,' \
			-i -e '/^\[testing\]/{$!N; s,#,,}' $CHROOTPATH32/root/etc/pacman.conf
		sed -i -e '/^#\[community-testing\]/ s,#,,' \
			-i -e '/^\[community-testing\]/{$!N; s,#,,}' $CHROOTPATH32/root/etc/pacman.conf
		local mesg="Forcing an update to use any affected packages..."
		echo -e "${YELLOW}---->${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}"
		arch-nspawn $CHROOTPATH32/root pacman -Syu --noconfirm
	elif [[ "$TESTING" = "Enabled" ]]; then
		# switch off testing
		local mesg="Disabling [testing] in chroot..."
		echo -e "${YELLOW}---->${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}"
		sed -i -e '/^\[testing\]/ s,\[,#\[,' \
			-i -e '/^#\[testing\]/{$!N; s,I,#I,}' $CHROOTPATH32/root/etc/pacman.conf
		sed -i -e '/^\[community-testing\]/ s,\[,#\[,' \
			-i -e '/^#\[community-testing\]/{$!N; s,I,#I,}' $CHROOTPATH32/root/etc/pacman.conf
		local mesg="Downgrading affected packages if any..."
		echo -e "${YELLOW}---->${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}"
		arch-nspawn $CHROOTPATH32/root pacman -Syuu --noconfirm
	fi
}

preview() {
	[[ -f $CHROOTPATH32/root/.arch-chroot ]] && \
		PRESENT="${BOLD}${GREEN}(Present)${ALL_OFF}" || \
		PRESENT="${BOLD}${RED}(Not present)${ALL_OFF}"
	echo -en ${BOLD}" chroot path:"
	echo -e "$(tput cr)$(tput cuf 14)${BLUE}$CHROOTPATH32 $PRESENT"${ALL_OFF}
	echo
	echo -en ${BOLD}" makeflags:"
	echo -e "$(tput cr)$(tput cuf 14)${BOLD}$THREADS"${ALL_OFF}
	[[ -z "$RUNNAMCAP" ]] && BAR="${RED}No${ALL_OFF}${BOLD}" || BAR="${BOLD}${GREEN}Yes${ALL_OFF}"
	echo -en ${BOLD}" use namcap:"
	echo -e "$(tput cr)$(tput cuf 14)${BLUE}$BAR"${ALL_OFF}
	[[ -z "$RUNDISTCC" ]] && BAR="${RED}No${ALL_OFF}${BOLD}" || BAR="${BOLD}${GREEN}Yes${ALL_OFF}"
	echo -en ${BOLD}" use distcc:"
	echo -e "$(tput cr)$(tput cuf 14)${BLUE}$BAR"${ALL_OFF}
	echo
	[[ "$TESTING" = "Disabled" ]] && TESTING="${BOLD}${RED}Disabled${ALL_OFF}"
	[[ "$TESTING" = "Enabled" ]] && TESTING="${BOLD}${GREEN}Enabled${ALL_OFF}"
	[[ -z "$TESTING" ]] && TESTING="${BOLD}${RED}N/A${ALL_OFF}"
	echo -en ${BOLD}" [testing]:"
	echo -e "$(tput cr)$(tput cuf 14)${BLUE}$TESTING"${ALL_OFF}
}

header() {
	echo -e "${BOLD}$PKG v$VERS"${ALL_OFF}
	echo
}

nuke() {
	local mesg="Nuking the chroot..."
	echo -e "${GREEN}==>${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}"
	if [[ $(stat -f -c %T "$CHROOTPATH32") == btrfs ]]; then
		for i in $CHROOTPATH32/*; do
			if [ -d $i ]; then
				btrfs subvolume delete $i
			else
				rm -f $i
			fi
		done
	else
		rm -rf $CHROOTPATH32/*
	fi
}

check

case "$1" in
	c)
		create
		;;
	t)
		check2 && testing
		# no need to call update since testing function handles this
		;;
	m)
		check2 && multilib
		# no need to call update since multilib function handles this
		;;
	d)
		check2 && repocheck && delete
		;;
	l)
		check2 && repocheck && list
		;;
	n)
		nuke
		;;
	p)
		header && preview
		;;
	s)
		if [[ -n "$RUNDISTCC" ]]; then
			if [[ $DISTCCFAIL -ne 1 ]]; then
				systemctl is-active distccd &>/dev/null
				if [[ $? -ne 0 ]]; then
					mesg="Please start distccd.service or edit $CFGFILE to not build with distcc..."
					echo -e "${RED}==> ERROR:${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}"
					exit 1
				fi
			fi
		fi
		if [[ ! -f $CHROOTPATH32/root/.arch-chroot ]]; then
			mesg="No chroot has been created so making one now..."
			echo -e "${YELLOW}---->${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}"
			mesg=
			create && modify_mcp
		fi
		build && indexit
		;;
	S)
		if [[ ! -f $CHROOTPATH32/root/.arch-chroot ]]; then
			mesg="No chroot has been created so making one now..."
			echo -e "${YELLOW}---->${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}"
			mesg=
			create && modify_mcp
		fi
		buildnc && indexit
		;;
	u)
		check2 && update
		;;
	*)
		header
		echo -e ${BOLD}" Usage: ${RED}$0${ALL_OFF}${BOLD} ${ALL_OFF}${BLUE}[option]"${ALL_OFF}
		echo
		echo -e ${BOLD}" --- SETUP AND BREAKDOWN  ---"
		echo -e ${BOLD}" Target: ${BLUE}$CHROOTPATH32"${ALL_OFF}
		echo -e ${BOLD}"   c) Create the clean chroot"${LL_OFF}
		echo -e ${BOLD}"   n) Nuke the clean chroot"${ALL_OFF}
		echo -e ${BOLD}"   t) Toggle [testing] on/off"${ALL_OFF}
		echo
		echo -e ${BOLD}" --- BUILDING ---"${ALL_OFF}
		echo -e ${BOLD}"   s) Run makepkg in clean chroot (default)"${ALL_OFF}
		echo -e ${BOLD}"   S) Run makepkg in clean chroot but do not clean first"${ALL_OFF}
		echo
		echo -e ${BOLD}" --- LOCAL REPO ---"${ALL_OFF}
		echo -e ${BOLD}" Local repo: ${BLUE}$REPO"${ALL_OFF}
		echo -e ${BOLD}"   l) List packages in local repo"${ALL_OFF}
		echo -e ${BOLD}"   d) Delete all packages in the local repo"${ALL_OFF}
		echo
		echo -e ${BOLD}" --- MISCELLANEOUS ---"
		echo -e ${BOLD}"   u) Update clean chroot"${ALL_OFF}
		echo -e ${BOLD}"   p) Preview settings"${ALL_OFF}
		;;
esac
